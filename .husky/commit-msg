#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message validation hook
# Enforces conventional commit format to prevent deployment issues

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo_error() {
    echo -e "${RED}❌ $1${NC}"
}

echo_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

echo_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Conventional commit pattern
# feat: add new feature
# fix: bug fix
# docs: documentation changes
# style: formatting changes
# refactor: code refactoring
# test: adding tests
# chore: maintenance tasks
# security: security-related changes
# perf: performance improvements
# ci: CI/CD changes
CONVENTIONAL_COMMIT_REGEX="^(feat|fix|docs|style|refactor|test|chore|security|perf|ci)(\(.+\))?: .{1,50}$"

# Check if commit message follows conventional format
if ! echo "$COMMIT_MSG" | grep -qE "$CONVENTIONAL_COMMIT_REGEX"; then
    echo_error "Invalid commit message format!"
    echo ""
    echo "Commit message must follow conventional commit format:"
    echo "  <type>[optional scope]: <description>"
    echo ""
    echo "Examples:"
    echo "  feat: add user authentication"
    echo "  fix: resolve payment processing bug"
    echo "  docs: update API documentation"
    echo "  security: fix XSS vulnerability"
    echo ""
    echo "Valid types: feat, fix, docs, style, refactor, test, chore, security, perf, ci"
    echo ""
    echo "Your commit message: '$COMMIT_MSG'"
    exit 1
fi

# Check for dangerous keywords that might indicate risky changes
DANGEROUS_KEYWORDS=("DROP TABLE" "DELETE FROM" "TRUNCATE" "rm -rf" "sudo rm" "FORMAT" "DESTROY")
COMMIT_MSG_UPPER=$(echo "$COMMIT_MSG" | tr '[:lower:]' '[:upper:]')

for keyword in "${DANGEROUS_KEYWORDS[@]}"; do
    if echo "$COMMIT_MSG_UPPER" | grep -q "$keyword"; then
        echo_error "Potentially dangerous operation detected in commit message: '$keyword'"
        echo "Please review your changes carefully and use a more descriptive commit message."
        exit 1
    fi
done

# Check commit message length
if [ ${#COMMIT_MSG} -gt 72 ]; then
    echo_warning "Commit message is longer than 72 characters (${#COMMIT_MSG})"
    echo "Consider making it more concise for better readability"
fi

# Check for common typos and issues
if echo "$COMMIT_MSG" | grep -qi "fix typo"; then
    echo_warning "Consider being more specific than 'fix typo'"
fi

if echo "$COMMIT_MSG" | grep -qi "wip\|work in progress"; then
    echo_error "Work in progress commits should not be pushed to main branch"
    echo "Complete your work before committing or use a feature branch"
    exit 1
fi

# Security-specific commit validation
if echo "$COMMIT_MSG" | grep -qi "password\|secret\|key\|token"; then
    echo_warning "Commit message mentions sensitive terms - ensure no secrets are included in the actual changes"
fi

# Production deployment safety
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    if echo "$COMMIT_MSG" | grep -qi "hotfix\|urgent\|emergency"; then
        echo_warning "Hotfix detected on main branch - ensure proper testing and review"
    fi
fi

echo_success "Commit message validation passed"
echo "Message: '$COMMIT_MSG'"