apiVersion: apps/v1
kind: Deployment
metadata:
  name: orbit-mkt-app
  namespace: ${NAMESPACE}
  labels:
    app: orbit-mkt
    version: ${VERSION}
    environment: ${ENVIRONMENT}
  annotations:
    deployment.kubernetes.io/revision: "${BUILD_NUMBER}"
    orbit.com/deployed-by: "${GITHUB_ACTOR}"
    orbit.com/git-sha: "${GITHUB_SHA}"
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: orbit-mkt
      version: ${VERSION}
  template:
    metadata:
      labels:
        app: orbit-mkt
        version: ${VERSION}
        environment: ${ENVIRONMENT}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      # Security Context - Run as non-root
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account for RBAC
      serviceAccountName: orbit-mkt-service-account
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - orbit-mkt
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for dedicated nodes if needed
      tolerations:
      - key: "node.kubernetes.io/memory-pressure"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      containers:
      - name: orbit-mkt-frontend
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        imagePullPolicy: Always
        
        # Security Context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: NODE_ENV
          value: ${NODE_ENV}
        - name: PORT
          value: "3000"
        - name: BACKEND_URL
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: backend-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: jwt-secret
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: gemini-api-key
        
        # Resource limits and requests
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts for logs and temp files
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      
      - name: orbit-mkt-backend
        image: ${IMAGE_NAME}-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
        
        ports:
        - name: api
          containerPort: 3001
          protocol: TCP
        
        env:
        - name: NODE_ENV
          value: ${NODE_ENV}
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: jwt-secret
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: orbit-mkt-secrets
              key: gemini-api-key
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "2Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: api
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /startup
            port: api
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: "1Gi"
      - name: logs-volume
        emptyDir:
          sizeLimit: "2Gi"
      
      # Image pull secrets if using private registry
      imagePullSecrets:
      - name: ghcr-secret
      
      # Graceful shutdown
      terminationGracePeriodSeconds: 30
      
      # DNS Policy
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: orbit-mkt-service
  namespace: ${NAMESPACE}
  labels:
    app: orbit-mkt
    service: orbit-mkt
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: api
    port: 3001
    targetPort: 3001
    protocol: TCP
  selector:
    app: orbit-mkt
    version: ${VERSION}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orbit-mkt-service-account
  namespace: ${NAMESPACE}
  labels:
    app: orbit-mkt
automountServiceAccountToken: false