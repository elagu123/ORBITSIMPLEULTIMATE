name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ===================================================================
  # LINTING & CODE QUALITY
  # ===================================================================
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false
        
      - name: 📝 Check TypeScript
        run: npm run typecheck
        continue-on-error: false

  # ===================================================================
  # SECURITY SCANNING
  # ===================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔐 Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: 🛡️ Run security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: github.event_name == 'push'
        continue-on-error: true

  # ===================================================================
  # TESTING
  # ===================================================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🧪 Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
          
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: codecov-frontend
          fail_ci_if_error: false

  # ===================================================================
  # BACKEND TESTING
  # ===================================================================
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
          
      - name: 📥 Install backend dependencies
        run: |
          cd server
          npm ci
          
      - name: 🧪 Run backend tests
        run: |
          cd server
          npm test
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

  # ===================================================================
  # BUILD & BUNDLE ANALYSIS
  # ===================================================================
  build:
    name: 🏗️ Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          VITE_BACKEND_URL: https://api.orbit-marketing.com
          
      - name: 📊 Analyze bundle size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          build-script: build
          pattern: 'dist/**/*.{js,css}'
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # ===================================================================
  # ACCESSIBILITY TESTING
  # ===================================================================
  accessibility:
    name: ♿ Accessibility Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🌐 Setup static server
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 5
          
      - name: ♿ Run accessibility tests
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ===================================================================
  # INTEGRATION TESTS
  # ===================================================================
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      backend:
        image: node:18
        options: >-
          --health-cmd "curl -f http://localhost:3001/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🚀 Start backend server
        run: |
          cd server
          npm ci
          npm start &
        env:
          NODE_ENV: test
          PORT: 3001
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret-key
          
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🌐 Start frontend server
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 10
          
      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001

  # ===================================================================
  # DEPLOYMENT (Production)
  # ===================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, test-backend, build, accessibility, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🚀 Deploy to production
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: orbit-marketing.com
          
      - name: 📧 Notify team
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚀 Production deployment completed!'

  # ===================================================================
  # DEPLOYMENT (Staging)
  # ===================================================================
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: 🚧 Deploy to staging
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          destination_dir: staging
          
      - name: 📧 Notify team
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚧 Staging deployment completed!'

  # ===================================================================
  # PERFORMANCE MONITORING
  # ===================================================================
  performance:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://orbit-marketing.com
            https://orbit-marketing.com/dashboard
            https://orbit-marketing.com/customers
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 📊 Create performance report
        run: |
          echo "## 📊 Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "Performance audit completed for production deployment." >> $GITHUB_STEP_SUMMARY
          echo "Check Lighthouse CI results for detailed metrics." >> $GITHUB_STEP_SUMMARY